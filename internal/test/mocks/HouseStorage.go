// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	models "avito-test/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HouseStorage is an autogenerated mock type for the HouseStorage type
type HouseStorage struct {
	mock.Mock
}

// CreateFlat provides a mock function with given fields: _a0, _a1, _a2
func (_m *HouseStorage) CreateFlat(_a0 context.Context, _a1 models.FlatBuilder, _a2 string) (models.Flat, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FlatBuilder, string) (models.Flat, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FlatBuilder, string) models.Flat); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(models.Flat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FlatBuilder, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHouse provides a mock function with given fields: _a0, _a1
func (_m *HouseStorage) CreateHouse(_a0 context.Context, _a1 models.HouseBuilder) (models.House, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateHouse")
	}

	var r0 models.House
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.HouseBuilder) (models.House, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.HouseBuilder) models.House); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.House)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.HouseBuilder) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Flat provides a mock function with given fields: _a0, _a1
func (_m *HouseStorage) Flat(_a0 context.Context, _a1 uint64) (models.Flat, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Flat")
	}

	var r0 models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (models.Flat, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) models.Flat); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.Flat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlatsByHouseId provides a mock function with given fields: _a0, _a1
func (_m *HouseStorage) FlatsByHouseId(_a0 context.Context, _a1 uint64) ([]*models.Flat, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FlatsByHouseId")
	}

	var r0 []*models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]*models.Flat, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []*models.Flat); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HouseDesc provides a mock function with given fields: _a0, _a1
func (_m *HouseStorage) HouseDesc(_a0 context.Context, _a1 uint64) (models.House, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for HouseDesc")
	}

	var r0 models.House
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (models.House, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) models.House); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.House)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlatStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *HouseStorage) UpdateFlatStatus(_a0 context.Context, _a1 uint64, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlatStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHouseStorage creates a new instance of HouseStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHouseStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *HouseStorage {
	mock := &HouseStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
