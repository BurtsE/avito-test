// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	models "avito-test/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HouseService is an autogenerated mock type for the HouseService type
type HouseService struct {
	mock.Mock
}

// CreateFlat provides a mock function with given fields: _a0, _a1
func (_m *HouseService) CreateFlat(_a0 context.Context, _a1 models.FlatBuilder) (*models.Flat, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlat")
	}

	var r0 *models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FlatBuilder) (*models.Flat, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FlatBuilder) *models.Flat); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FlatBuilder) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHouse provides a mock function with given fields: _a0, _a1
func (_m *HouseService) CreateHouse(_a0 context.Context, _a1 models.HouseBuilder) (*models.House, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateHouse")
	}

	var r0 *models.House
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.HouseBuilder) (*models.House, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.HouseBuilder) *models.House); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.House)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.HouseBuilder) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HouseDesc provides a mock function with given fields: _a0, _a1
func (_m *HouseService) HouseDesc(_a0 context.Context, _a1 uint64) (*models.House, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for HouseDesc")
	}

	var r0 *models.House
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*models.House, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *models.House); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.House)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HouseFlats provides a mock function with given fields: _a0, _a1
func (_m *HouseService) HouseFlats(_a0 context.Context, _a1 uint64) ([]*models.Flat, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for HouseFlats")
	}

	var r0 []*models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) ([]*models.Flat, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) []*models.Flat); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlatStatus provides a mock function with given fields: _a0, _a1
func (_m *HouseService) UpdateFlatStatus(_a0 context.Context, _a1 models.FlatStatus) (*models.Flat, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlatStatus")
	}

	var r0 *models.Flat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FlatStatus) (*models.Flat, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.FlatStatus) *models.Flat); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Flat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.FlatStatus) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHouseService creates a new instance of HouseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHouseService(t interface {
	mock.TestingT
	Cleanup(func())
}) *HouseService {
	mock := &HouseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
