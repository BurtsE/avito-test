// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	models "avito-test/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ValidationService is an autogenerated mock type for the ValidationService type
type ValidationService struct {
	mock.Mock
}

// ValidateDummyUserData provides a mock function with given fields: _a0, _a1
func (_m *ValidationService) ValidateDummyUserData(_a0 context.Context, _a1 []byte) (models.EnumRole, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateDummyUserData")
	}

	var r0 models.EnumRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (models.EnumRole, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) models.EnumRole); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.EnumRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateFlat provides a mock function with given fields: _a0, _a1
func (_m *ValidationService) ValidateFlat(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFlat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateFlatBuilderData provides a mock function with given fields: _a0, _a1
func (_m *ValidationService) ValidateFlatBuilderData(_a0 context.Context, _a1 []byte) (models.FlatBuilder, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFlatBuilderData")
	}

	var r0 models.FlatBuilder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (models.FlatBuilder, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) models.FlatBuilder); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.FlatBuilder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateFlatStatusData provides a mock function with given fields: _a0, _a1
func (_m *ValidationService) ValidateFlatStatusData(_a0 context.Context, _a1 []byte) (models.FlatStatus, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFlatStatusData")
	}

	var r0 models.FlatStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (models.FlatStatus, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) models.FlatStatus); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.FlatStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateHouse provides a mock function with given fields: _a0, _a1
func (_m *ValidationService) ValidateHouse(_a0 context.Context, _a1 uint64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateHouse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateHouseData provides a mock function with given fields: _a0, _a1
func (_m *ValidationService) ValidateHouseData(_a0 context.Context, _a1 []byte) (models.HouseBuilder, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ValidateHouseData")
	}

	var r0 models.HouseBuilder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (models.HouseBuilder, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) models.HouseBuilder); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.HouseBuilder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewValidationService creates a new instance of ValidationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidationService {
	mock := &ValidationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
